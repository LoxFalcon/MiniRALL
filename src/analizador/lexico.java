/* Generated By:JJTree&JavaCC: Do not edit this line. lexico.java */
package analizador;
import java.io.*;
import java.util.Scanner;
public class lexico/*@bgen(jjtree)*/implements lexicoTreeConstants, lexicoConstants {/*@bgen(jjtree)*/
  protected static JJTlexicoState jjtree = new JJTlexicoState();public static boolean bandera;
        public static SymbolsTable tabla;
        public static void main( String[] args )throws ParseException, Exception
        {
                try
                {
                        Scanner sc = new Scanner(System.in);
                        System.out.println("Presione 1 para analisis lexico, 2 para analisis sintactico: ");
                        int n = sc.nextInt();
                        if(n == 1){
                        System.out.println("Selecciono Analisis Lexico");
                        lexico analizador = new lexico( System.in ) ;
                        analizador.iniciarAnalisisLexico();
                        }
                        else if(n == 2){
                        System.out.println("Selecciono Analisis Sintactico");
                        lexico analizador = new lexico( System.in ) ;
                        SimpleNode nodo = analizador.iniciarAnalisisSintactico();
                        nodo.dump("");
                        }
                        System.out.println("Analisis Finalizado Exitosamente");
                }
                catch(ParseException e)
                {
                        System.out.println(e.getMessage());
                        System.out.println("Analisis Finalizado Incorrectamente");
                }
        }
        public static boolean matchTypes(int valueID, int value){
                switch(valueID){
                        case INT:
                                return (value == NUMERO || value == INT);
            case FLOAT:
                return (value == NUMERO || value == DECIMAL || value == INT || value == FLOAT);
            default: return false;
                }
        }

  static final public void iniciarAnalisisLexico() throws ParseException {
 /*@bgen(jjtree) iniciarAnalisisLexico */
  SimpleNode jjtn000 = new SimpleNode(JJTINICIARANALISISLEXICO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MAIN:
        case CONSTANTE:
        case VARIABLE:
        case INPUT:
        case PRINT:
        case IF:
        case ELSE:
        case WHILE:
        case ASIGNACION:
        case RESTA:
        case SUMA:
        case MULTIPLICACION:
        case DIVISION:
        case MENOR:
        case MAYOR:
        case MENORIGUAL:
        case MAYORIGUAL:
        case IGUAL:
        case DIFERENTE:
        case PARENTA:
        case PARENTC:
        case LLAVEA:
        case LLAVEC:
        case PCOMA:
        case DCOMA:
        case CORCHETEA:
        case CORCHETEC:
        case INT:
        case FLOAT:
        case NUMERO:
        case DECIMAL:
        case CADENA:
        case IDENTIFICADOR:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MAIN:
          jj_consume_token(MAIN);
          break;
        case CONSTANTE:
          jj_consume_token(CONSTANTE);
          break;
        case VARIABLE:
          jj_consume_token(VARIABLE);
          break;
        case INPUT:
          jj_consume_token(INPUT);
          break;
        case PRINT:
          jj_consume_token(PRINT);
          break;
        case IF:
          jj_consume_token(IF);
          break;
        case ELSE:
          jj_consume_token(ELSE);
          break;
        case WHILE:
          jj_consume_token(WHILE);
          break;
        case ASIGNACION:
          jj_consume_token(ASIGNACION);
          break;
        case RESTA:
          jj_consume_token(RESTA);
          break;
        case SUMA:
          jj_consume_token(SUMA);
          break;
        case MULTIPLICACION:
          jj_consume_token(MULTIPLICACION);
          break;
        case DIVISION:
          jj_consume_token(DIVISION);
          break;
        case MENOR:
          jj_consume_token(MENOR);
          break;
        case MAYOR:
          jj_consume_token(MAYOR);
          break;
        case MAYORIGUAL:
          jj_consume_token(MAYORIGUAL);
          break;
        case MENORIGUAL:
          jj_consume_token(MENORIGUAL);
          break;
        case IGUAL:
          jj_consume_token(IGUAL);
          break;
        case DIFERENTE:
          jj_consume_token(DIFERENTE);
          break;
        case PARENTA:
          jj_consume_token(PARENTA);
          break;
        case PARENTC:
          jj_consume_token(PARENTC);
          break;
        case LLAVEA:
          jj_consume_token(LLAVEA);
          break;
        case LLAVEC:
          jj_consume_token(LLAVEC);
          break;
        case PCOMA:
          jj_consume_token(PCOMA);
          break;
        case DCOMA:
          jj_consume_token(DCOMA);
          break;
        case CORCHETEA:
          jj_consume_token(CORCHETEA);
          break;
        case CORCHETEC:
          jj_consume_token(CORCHETEC);
          break;
        case INT:
          jj_consume_token(INT);
          break;
        case FLOAT:
          jj_consume_token(FLOAT);
          break;
        case NUMERO:
          jj_consume_token(NUMERO);
          break;
        case DECIMAL:
          jj_consume_token(DECIMAL);
          break;
        case CADENA:
          jj_consume_token(CADENA);
          break;
        case IDENTIFICADOR:
          jj_consume_token(IDENTIFICADOR);
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
  }

  static final public SimpleNode iniciarAnalisisSintactico() throws ParseException {
 /*@bgen(jjtree) iniciarAnalisisSintactico */
  SimpleNode jjtn000 = new SimpleNode(JJTINICIARANALISISSINTACTICO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
                 tabla = new SymbolsTable();
      jj_consume_token(MAIN);
      jj_consume_token(LLAVEA);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONSTANTE:
        case VARIABLE:
        case INPUT:
        case PRINT:
        case IF:
        case WHILE:
        case IDENTIFICADOR:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        bloque();
      }
      jj_consume_token(LLAVEC);
                                                     jjtree.closeNodeScope(jjtn000, true);
                                                     jjtc000 = false;
                                                    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void bloque() throws ParseException {
 /*@bgen(jjtree) bloque */
  SimpleNode jjtn000 = new SimpleNode(JJTBLOQUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARIABLE:
        declararVariable();
        break;
      case CONSTANTE:
        declararConstante();
        break;
      case PRINT:
        impresion();
        break;
      case IDENTIFICADOR:
        asignacion();
        break;
      case INPUT:
        entrada();
        break;
      case IF:
        decisionIF();
        break;
      case WHILE:
        cicloWhile();
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
  }

  static final public void declararConstante() throws ParseException {
 /*@bgen(jjtree) declararConstante */
 SimpleNode jjtn000 = new SimpleNode(JJTDECLARARCONSTANTE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Symbol s; Token a; int typeKind; String typeKindID; String id; String value; int valueKind;
    try {
      jj_consume_token(CONSTANTE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        a = tipoInteger();
        break;
      case FLOAT:
        a = tipoFloat();
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                            typeKind = a.kind; typeKindID = a.image;
      a = identificador();
                                                                                                                       id = a.image;
      jj_consume_token(ASIGNACION);
      a = operacion();
                                                                                                                                                                value = a.image; valueKind = a.kind;
                if(!matchTypes(typeKind, valueKind)){
                {if (true) throw new SemanticException("El valor no es admitido: " + value);}
                }
                                if(!tabla.contains(id)){
                                        s = new Symbol(typeKind, id);
                                        s.setSize(-1);
                                        s.setSymbolKind(Symbol.KCONSTANT);
                                        tabla.insert(id, s);
                                        }else{
                                                {if (true) throw new SemanticException("El simbolo " + id + " ya existe");}
                                                }
      jj_consume_token(PCOMA);
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
  }

  static final public void declararVariable() throws ParseException {
 /*@bgen(jjtree) declararVariable */
 SimpleNode jjtn000 = new SimpleNode(JJTDECLARARVARIABLE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Symbol s; Token a; int typeKind; String typeKindID; String id; String value = ""; int valueKind;
    try {
      jj_consume_token(VARIABLE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        a = tipoInteger();
        break;
      case FLOAT:
        a = tipoFloat();
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                           typeKind = a.kind; typeKindID = a.image;
      a = identificador();
                                                                                                                      id = a.image;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASIGNACION:
        jj_consume_token(ASIGNACION);
        a = operacion();
                                                                                                                                                                value = a.image; valueKind = a.kind;
                if(!matchTypes(typeKind, valueKind)){
                {if (true) throw new SemanticException("El valor no es admitido: " + value);}
                }
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
                                if(!tabla.contains(id)){
                                        s = new Symbol(typeKind, id);
                                        s.setSize(-1);
                                        s.setSymbolKind(Symbol.KVARIABLE);
                                        tabla.insert(id, s);
                                        }else{
                                                {if (true) throw new SemanticException("El simbolo " + id + " ya existe");}
                                                }
      jj_consume_token(PCOMA);
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
  }

  static final public Token identificador() throws ParseException {
 /*@bgen(jjtree) identificador */
 SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFICADOR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFICADOR);
                                      jjtree.closeNodeScope(jjtn000, true);
                                      jjtc000 = false;
                                     {if (true) return t;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Token operacion() throws ParseException {
 /*@bgen(jjtree) operacion */
 SimpleNode jjtn000 = new SimpleNode(JJTOPERACION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t; boolean isFloat = false; int index = -1; String operacion = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFICADOR:
        t = identificador();
                            operacion = t.image;
                if(tabla.contains(t.image)){
                        t.kind = tabla.search(t.image).getType(); //Hay que asignarlo en esta primera parte, sino puede que t.kind == IDENTIFICADOR (no nos es util)
                        if(t.kind == FLOAT|| t.kind == INT) {
                                if(tabla.search(t.image).getType() == FLOAT){
                                        isFloat = true;
                                }
                        }
                        else{
                                t.kind = tabla.search(t.image).getType();
                                t.image = operacion;
                                {if (true) return t;}
                        }
                }else{
                        {if (true) throw new SemanticException("El simbolo : " + t.image + " no existe");}
                }
        break;
      case RESTA:
      case NUMERO:
      case DECIMAL:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RESTA:
          t = operadorRestar();
                                operacion = operacion + t.image;
          break;
        default:
          jj_la1[7] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMERO:
          t = valorNumeroEntero();
          break;
        case DECIMAL:
          t = valorNumeroDecimal();
                                                                                                        isFloat = true;
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                                            operacion = t.image;
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RESTA:
        case SUMA:
        case MULTIPLICACION:
        case DIVISION:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_3;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SUMA:
          t = operadorSumar();
          break;
        case RESTA:
          t = operadorRestar();
          break;
        case MULTIPLICACION:
          t = operadorMultiplicar();
          break;
        case DIVISION:
          t = operadorDividir();
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                                                                            operacion = operacion + " " + t.image + " ";
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFICADOR:
          t = identificador();
                                    operacion = operacion + t.image;
                        if(tabla.contains(t.image)){
                                if(tabla.search(t.image).getType() == FLOAT||tabla.search(t.image).getType() == INT) {
                                        if(tabla.search(t.image).getType() == FLOAT){
                                                isFloat = true;
                                        }
                                }else{
                                        //t.kind = tabla.search(t.image).getType(); return t; 
                                        //Hay que mandar error ya que significa que no es del tipo adecuado y ya estamos en una operaci�n aritm�tica
                                        {if (true) throw new SemanticException("No es posible realizar operaciones con esta variable "+t.image);}
                                }
                        }else{
                                {if (true) throw new SemanticException("El simbolo : " + t.image + " no existe");}
                        }
          break;
        case RESTA:
        case NUMERO:
        case DECIMAL:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case RESTA:
            t = operadorRestar();
                                        operacion = operacion + t.image;
            break;
          default:
            jj_la1[12] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NUMERO:
            t = valorNumeroEntero();
            break;
          case DECIMAL:
            t = valorNumeroDecimal();
                                                                                                        isFloat = true;
            break;
          default:
            jj_la1[13] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
                                                            operacion = operacion + t.image;
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                        if(isFloat){
                                t.kind = FLOAT;
                        }else{
                                t.kind = INT;
                        }
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                 t.image = operacion; {if (true) return t;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Token tipoInteger() throws ParseException {
 /*@bgen(jjtree) tipoInteger */
 SimpleNode jjtn000 = new SimpleNode(JJTTIPOINTEGER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(INT);
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                           {if (true) return t;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Token tipoFloat() throws ParseException {
 /*@bgen(jjtree) tipoFloat */
 SimpleNode jjtn000 = new SimpleNode(JJTTIPOFLOAT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(FLOAT);
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                             {if (true) return t;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Token valorNumeroEntero() throws ParseException {
 /*@bgen(jjtree) valorNumeroEntero */
 SimpleNode jjtn000 = new SimpleNode(JJTVALORNUMEROENTERO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(NUMERO);
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                             {if (true) return t;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Token valorNumeroDecimal() throws ParseException {
 /*@bgen(jjtree) valorNumeroDecimal */
 SimpleNode jjtn000 = new SimpleNode(JJTVALORNUMERODECIMAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(DECIMAL);
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                             {if (true) return t;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void impresion() throws ParseException {
 /*@bgen(jjtree) impresion */
 SimpleNode jjtn000 = new SimpleNode(JJTIMPRESION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token id;
    try {
      jj_consume_token(PRINT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CADENA:
        id = jj_consume_token(CADENA);
        break;
      case RESTA:
      case NUMERO:
      case DECIMAL:
      case IDENTIFICADOR:
        id = operacion();
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(PCOMA);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void asignacion() throws ParseException {
 /*@bgen(jjtree) asignacion */
 SimpleNode jjtn000 = new SimpleNode(JJTASIGNACION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t; int typeKind; String id; String value; int valueKind; int index = -1;
    try {
      t = identificador();
                if(tabla.contains(t.image)){
                        typeKind = tabla.search(t.image).getType();
                        id = tabla.search(t.image).getValue();
                        if(tabla.search(t.image).getSymbolKind() == Symbol.KCONSTANT){
                                {if (true) throw new SemanticException("No se puede modificar el valor de: " + id);}
                        }
                } else{
                        {if (true) throw new SemanticException("El simbolo : " + t.image + " no existe");}
                        }
      jj_consume_token(ASIGNACION);
      t = operacion();
                                                       value = t.image; valueKind = t.kind;
                                        if(!matchTypes(typeKind, valueKind)){
                                                {if (true) throw new SemanticException("El valor no es admitido: " + value);}
                                                }
      jj_consume_token(PCOMA);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void entrada() throws ParseException {
 /*@bgen(jjtree) entrada */
 SimpleNode jjtn000 = new SimpleNode(JJTENTRADA);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t; int index = -1; String id; int kind;
    try {
      jj_consume_token(INPUT);
      jj_consume_token(PARENTA);
      t = identificador();
                if(!tabla.contains(t.image)){
                        {if (true) throw new SemanticException("El simbolo : " + t.image + " no existe");}
                }else{
                        id = t.image;
                        kind = tabla.search(id).getType();
                }
      jj_consume_token(PARENTC);
      jj_consume_token(PCOMA);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public Token operadorMultiplicar() throws ParseException {
 /*@bgen(jjtree) operadorMultiplicar */
 SimpleNode jjtn000 = new SimpleNode(JJTOPERADORMULTIPLICAR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(MULTIPLICACION);
                                    jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
                                   {if (true) return t;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Token operadorDividir() throws ParseException {
 /*@bgen(jjtree) operadorDividir */
 SimpleNode jjtn000 = new SimpleNode(JJTOPERADORDIVIDIR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(DIVISION);
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                             {if (true) return t;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Token operadorSumar() throws ParseException {
 /*@bgen(jjtree) operadorSumar */
 SimpleNode jjtn000 = new SimpleNode(JJTOPERADORSUMAR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(SUMA);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                         {if (true) return t;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Token operadorRestar() throws ParseException {
 /*@bgen(jjtree) operadorRestar */
 SimpleNode jjtn000 = new SimpleNode(JJTOPERADORRESTAR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(RESTA);
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                          {if (true) return t;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Token operadorMenor() throws ParseException {
 /*@bgen(jjtree) Menor */
 SimpleNode jjtn000 = new SimpleNode(JJTMENOR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(MENOR);
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                           {if (true) return t;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Token operadorMayor() throws ParseException {
 /*@bgen(jjtree) Mayor */
 SimpleNode jjtn000 = new SimpleNode(JJTMAYOR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(MAYOR);
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                           {if (true) return t;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Token operadorIgual() throws ParseException {
 /*@bgen(jjtree) Igual */
 SimpleNode jjtn000 = new SimpleNode(JJTIGUAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IGUAL);
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                           {if (true) return t;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Token operadorMenorIgual() throws ParseException {
 /*@bgen(jjtree) MenorIgual */
 SimpleNode jjtn000 = new SimpleNode(JJTMENORIGUAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(MENORIGUAL);
                                 jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
                                {if (true) return t;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Token operadorMayorIgual() throws ParseException {
 /*@bgen(jjtree) MayorIgual */
 SimpleNode jjtn000 = new SimpleNode(JJTMAYORIGUAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(MAYORIGUAL);
                                 jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
                                {if (true) return t;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Token operadorDiferente() throws ParseException {
 /*@bgen(jjtree) Diferente */
 SimpleNode jjtn000 = new SimpleNode(JJTDIFERENTE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(DIFERENTE);
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                               {if (true) return t;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void decisionIF() throws ParseException {
 /*@bgen(jjtree) decisionIF */
 SimpleNode jjtn000 = new SimpleNode(JJTDECISIONIF);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);String op;
    try {
      jj_consume_token(IF);
      jj_consume_token(PARENTA);
      op = expresionLogica();
      jj_consume_token(PARENTC);
      jj_consume_token(LLAVEA);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONSTANTE:
        case VARIABLE:
        case INPUT:
        case PRINT:
        case IF:
        case WHILE:
        case IDENTIFICADOR:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_4;
        }
        bloque();
      }
      jj_consume_token(LLAVEC);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        decisionELSE();
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
                                                                                                 jjtree.closeNodeScope(jjtn000, true);
                                                                                                 jjtc000 = false;
                                                                                                System.out.println(op);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void decisionELSE() throws ParseException {
 /*@bgen(jjtree) decisionELSE */
  SimpleNode jjtn000 = new SimpleNode(JJTDECISIONELSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ELSE);
      jj_consume_token(LLAVEA);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONSTANTE:
        case VARIABLE:
        case INPUT:
        case PRINT:
        case IF:
        case WHILE:
        case IDENTIFICADOR:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_5;
        }
        bloque();
      }
      jj_consume_token(LLAVEC);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public String expresionLogica() throws ParseException {
 /*@bgen(jjtree) expresionLogica */
 SimpleNode jjtn000 = new SimpleNode(JJTEXPRESIONLOGICA);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t1; Token op; String operacion = "";
    try {
      t1 = operacion();
                                                                         operacion = t1.image;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MENOR:
        op = operadorMenor();
        break;
      case MAYOR:
        op = operadorMayor();
        break;
      case IGUAL:
        op = operadorIgual();
        break;
      case MAYORIGUAL:
        op = operadorMayorIgual();
        break;
      case MENORIGUAL:
        op = operadorMenorIgual();
        break;
      case DIFERENTE:
        op = operadorDiferente();
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                                                                                          operacion = operacion + " " + op.image;
      t1 = operacion();
                                                                         operacion = operacion + " " + t1.image;
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                 {if (true) return operacion;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void cicloWhile() throws ParseException {
 /*@bgen(jjtree) cicloWhile */
 SimpleNode jjtn000 = new SimpleNode(JJTCICLOWHILE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);String op;
    try {
      jj_consume_token(WHILE);
      jj_consume_token(PARENTA);
      op = expresionLogica();
      jj_consume_token(PARENTC);
      jj_consume_token(LLAVEA);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONSTANTE:
        case VARIABLE:
        case INPUT:
        case PRINT:
        case IF:
        case WHILE:
        case IDENTIFICADOR:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_6;
        }
        bloque();
      }
      jj_consume_token(LLAVEC);
                                                                                    jjtree.closeNodeScope(jjtn000, true);
                                                                                    jjtc000 = false;
                                                                                   System.out.println(op);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public lexicoTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[21];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xfffffffe,0xfffffffe,0x17c,0x17c,0x30000000,0x30000000,0x200,0x400,0xc0000000,0xc0000400,0x3c00,0x3c00,0x400,0xc0000000,0xc0000400,0xc0000400,0x17c,0x80,0x17c,0xfc000,0x17c,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x3,0x3,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x2,0x3,0x2,0x0,0x2,0x0,0x2,};
   }

  /** Constructor with InputStream. */
  public lexico(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public lexico(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new lexicoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public lexico(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new lexicoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public lexico(lexicoTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(lexicoTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[39];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 21; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 39; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
